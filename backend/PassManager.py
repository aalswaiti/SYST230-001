#SYST230Project
from cryptography.fernet import Fernet
import os
import os.path
from pathlib import Path
import random
import zipfile
import pyzipper
#Fernet: https://www.thepythoncode.com/article/encrypt-decrypt-files-symmetric-python

#In short: 
#a) Fernet generates a key, that key can be used to encrypt and decrypt data. It may look like this
#   "9AFosuDE9Ytk4dPXUDhyPdMhus0_d5knBp585mLlGs4=""
#b) Next, a blank dictionary should be made and saved to a file called "Vault.txt". Here is where passwords will be stored. in a format like 
#	{"Netflix":"P@55w0rd!", "Amazon":"Password123!"}
#c) The key will be used to encrypt and decrypt the data in Vault.
#d) When not in use, the key should be zipped with a password (the master password). This will only be unzipped to decrypt or encrypt "Vault.txt"

#So far, I made a function to generate passwords to populate Vault.txt: "generatePassword"
#I added a function to zip and delete the Fernet Key. (It also adds password protection): "zipWithUserPass" 
#I added functions required to test encoding through Fernet: "testFernet()"
#these will be the core functions needed to operate the password management system. Hope this helped

#TODO: make a function to unzip the key.key.zip file to grab the Fernet key to later decrypt the contents of Vault.txt. This should ONLY be
#	   held in memory.


def generatePassword(): #generates a random 12 character password. For later use
	possible_characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&()*+,-./:;<=>?@[\]^`{|}~'
	newpass = ""
	for i in range(0,12):
		random_number = random.randint(0, len(possible_characters))
		newpass = newpass + possible_characters[random_number]
	print(newpass)

def write_key():#this generates a key for the master password. This should ONLY be used when the program is first used
	key = Fernet.generate_key()
	with open("key.key", "wb") as key_file:
		key_file.write(key)

def load_key():#after the key is created, this function is used to access it in order to secure information. (loads the file key.key)
	return open("key.key", "rb").read()

def zip_and_delete(inputfile, password): #used to zip a file and delete the non password protected one
	secret_password = password
	with pyzipper.AESZipFile(inputfile+'.zip','w',compression=pyzipper.ZIP_LZMA,encryption=pyzipper.WZ_AES) as zf:
		zf.setpassword(secret_password)
		with open(inputfile, 'r') as file:
			data = file.read()
			zf.writestr(inputfile, data)
	with pyzipper.AESZipFile(inputfile+'.zip') as zf:
		zf.setpassword(secret_password)
		my_secrets = zf.read(inputfile)
	os.remove(inputfile)

def zipWithUserPass(): #this zips the key.key file (generated by "testFernet()") with the inputted password.
	path_to_file = 'key.key'
	path = Path(path_to_file)
	if path.is_file(): #if key.key exists, then
		print(f'The file {path_to_file} exists')
		password = ""
		check1 = ""
		check2 = ""
		inputpass = True
		while inputpass == True:
			check1 = input("Input Password: ")
			check2 = input("Input Password Again: ")
			if check1 == check2:
				password = check1
				inputpass = False
			else:
				print("Passwords do not match. Try again.")
		zip_and_delete(path_to_file, bytes(password, 'utf-8'))#passes to zip and delete
	else:
		print(f'The file {path_to_file} does not exist')

def testFernet():
	#generate and write a new key
	write_key() 
	# load the previously generated key
	key = load_key()
	print("compare the zip to this!\n")
	print(key)
	#encode with the generated key:
	print("Encoding the message 'some secret message'")
	message = "some secret message".encode()
	# initialize the Fernet class
	f = Fernet(key)
	# encrypt the message
	encrypted = f.encrypt(message)
	# print how it looks
	print(encrypted)
	print("DECRYPTING")
	decrypted_encrypted = f.decrypt(encrypted)
	print(decrypted_encrypted)

def initialSetup():
	write_key() 
	# load the previously generated key
	key = load_key()



print("\nGenerating the Firnet Key and Testing it!\n")
testFernet()
print("\nGenerating a random 12 character password!\n")
generatePassword()
print("\nPassword Protecting the key.key file and zipping it!\n")
zipWithUserPass()
print("Try Unzipping it in your file explorer!")